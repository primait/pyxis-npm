.a-form-field__custom-select {
  background: color(background);
  border: map-get($formConfig, borderWidth) solid color(shape);
  border-radius: map-get($formConfig, borderRadius);
  color: color(brandAlt, dark);
  cursor: pointer;
  display: none;
  flex-direction: column;
  pointer-events: none;
  position: relative;
  width: 100%;

  @include mq(medium) {
    display: flex;
  }

  &.is-valid {
    border-color: color(brandAlt, dark);
    color: color(brandAlt, dark);
    -webkit-text-fill-color: color(brandAlt, dark);
  }

  &.has-error {
    border-color: color(error);
  }

  &.has-warning {
    border-color: color(alert, dark);
  }

  &.is-disabled {
    background: color(background, dark);
    opacity: map-get($formConfig, fieldDisabledOpacity);
    pointer-events: none;
  }

  &.is-open {
    border: map-get($formConfig, borderWidth) solid color(brandAlt);
    box-shadow: map-get($formConfig, fieldShadow);

    @include mq(medium) {
      border-radius: map-get($formConfig, borderRadius) map-get($formConfig, borderRadius) 0px 0px;
    }
  }

  @include mq(medium) {
    pointer-events: auto;
  }
}

.a-form-field__custom-select__status {
  align-items: center;
  border-color: inherit;
  color: rgba(color(text), map-get($formConfig, fieldPlaceholderOpacity));
  display: flex;
  height: map-get($formConfig, fieldHeight);
  padding: map-get($formConfig, fieldPadding);
  position: relative;

  .a-form-field__custom-select.is-valid & {
    color: color(brandAlt, dark);
    opacity: 1;
  }

  .a-form-field__custom-select.has-error & {
    color: color(error);
    opacity: 1;
  }

  .a-form-field__custom-select.has-warning & {
    opacity: 1;
  }
}

.a-form-field__custom-select__status:after {
  color: color(brandAlt, dark);
  content: "\e90a";
  font-family: 'pyxisIconset';
  font-size: map-get($formConfig, iconSize);
  position: absolute;
  top: 50%;
  transform: translateY(-50%) rotate(0deg);
  transition: transform 0.2s cubic-bezier(0, 1, 1, 1);
  right: 10px;
}

.a-form-field__custom-select.is-open .a-form-field__custom-select__status:after {
  transform: translateY(-50%) rotate(-180deg);
}

.a-form-field__custom-select__list {
  background: color(background);
  border: map-get($formConfig, borderWidth) solid color(shape);
  border-radius: 0 0 map-get($formConfig, borderRadius) map-get($formConfig, borderRadius);
  border-top: none;
  display: none;
  flex-direction: column;
  left: -1px;
  list-style: none;
  margin: -1px 0 0 0;
  max-height: map-get($formConfig, fieldHeight) * 4 + map-get($formConfig, fieldHeight) * 0.5;
  overflow-x: hidden;
  overflow-y: auto;
  padding: 0;
  position: absolute;
  right: -1px;
  top: 100%;
  z-index: 3;

  .is-open & {
    border: 1px solid color(brandAlt);
    border-top-color: color(shape);
    box-shadow: map-get($formConfig, fieldShadow);
    display: none;

    @include mq(medium) {
      display: flex;
    }
  }
}

.a-form-field__custom-select__list__item {
  align-items: center;
  color: color(text, dark);
  display: flex;
  flex: 0 0 100%;
  min-height: map-get($formConfig, fieldHeight);
  outline: none;
  padding: map-get($formConfig, fieldPadding);

  &.is-selected,
  &.is-selected:hover,
  &.is-selected:focus {
    background: color(brandAlt, light);
    color: color(brandAlt, dark);
  }

  &:hover,
  &:focus {
    background: color(background, dark);
  }
}

.a-form-field__select {
  background: color(background);
  border: map-get($formConfig, borderWidth) solid color(shape);
  border-radius: map-get($formConfig, borderRadius);
  bottom: 10px;
  color: color(brandAlt, dark);
  display: flex;
  font-size: size(small);
  height: map-get($formConfig, fieldHeight);
  margin: 0;
  outline: none;
  padding: map-get($formConfig, fieldPadding);
  -webkit-appearance: menulist;

  @include mq(medium) {
    display: none;
  }

  &:focus {
    border-color: color(brandAlt);
  }

  &[disabled] {
    background: color(background, dark);
    opacity: map-get($formConfig, fieldDisabledOpacity);
    pointer-events: none;
  }

  &.is-valid {
    border-color: color(brandAlt, dark);
    color: color(brandAlt, dark);
  }

  &.has-error {
    border-color: color(error);
    color: color(error);
  }

  &.has-warning {
    border-color: color(alert, dark);
    color: color(alert, dark);
  }

  option {
    color: color(text, dark);
  }
}
