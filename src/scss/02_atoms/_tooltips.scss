$tooltipConfig: (
  arrowSize: rem(12px),
  background: color(backgroundAlt, base),
  borderRadius: rem(5px),
  color: color(textAlt, light),
  offset: rem(15px),
  paddingTop: rem(10px),
  paddingRight: rem(15px),
  paddingBottom: rem(6px),
  paddingLeft: rem(15px),
  breakpoints: (
    base: (
      width: 100%,
    ),
    small: (
      width: rem(320px),
    )
  )
) !default;

$tooltipKind: (
  error: color(error),
  warning: color(alert),
  brand: color(brand, light),
) !default;

$tooltipPositions: (
  top: (
    top: initial,
    right: initial,
    bottom: 100%,
    left: 50%,
  ),
  right: (
    top: 50%,
    right: initial,
    left: 100%,
    bottom: initial,
  ),
  bottom: (
    top: 100%,
    right: initial,
    left: 50%,
    bottom: initial,
  ),
  left: (
    top: 50%,
    right: 100%,
    left: initial,
    bottom: initial,
  ),
);

.tooltip {
  background-color: get($tooltipConfig, background);
  border-radius: get($tooltipConfig, borderRadius);
  color: get($tooltipConfig, color);
  padding-bottom: get($tooltipConfig, paddingBottom);
  padding-left: get($tooltipConfig, paddingLeft);
  padding-right: get($tooltipConfig, paddingRight);
  padding-top: get($tooltipConfig, paddingTop);
  position: relative;
  width: 100%;
  z-index: zIndex(tooltip);

  @include mq(small) {
    position: absolute;
  }

  @each $bp, $bpConfig in get($tooltipConfig, breakpoints) {
    @include mq($bp) {
      width: get($bpConfig, width);
    }
  }

  &:before {
    background-color: get($tooltipConfig, background);
    content: "";
    height: get($tooltipConfig, arrowSize);
    position: absolute;
    top: #{(uGet($tooltipConfig, arrowSize) / -2)}rem;
    transform: rotate(45deg);
    width: get($tooltipConfig, arrowSize);
  }
}

@mixin tooltipPosition($position) {
  bottom: get($tooltipPositions, $position, bottom);
  left: get($tooltipPositions, $position, left);
  right: get($tooltipPositions, $position, right);
  top: get($tooltipPositions, $position, top);

  @if $position == top {
    transform: translate(-50%, -(get($tooltipConfig, offset)));
  } @else if $position == right {
    transform: translate(get($tooltipConfig, offset), -50%);
  } @else if $position == left {
    transform: translate(-(get($tooltipConfig, offset)), -50%);
  } @else if $position == bottom {
    transform: translate(-50%, get($tooltipConfig, offset));
  }
}

@mixin arrowPosition($position) {
  #{$position}: calc(100% - #{get($tooltipConfig, arrowSize) / 2});

  @if $position == top or $position == bottom {
    left: 50%;
    transform: translateX(-50%) rotate(45deg);
  } @else {
    top: 50%;
    transform: translateY(-50%) rotate(45deg);
  }
}

@each $position, $props in $tooltipPositions {
  .tooltip--#{$position} {
    @include mq(small) {
      @include tooltipPosition($position);
    }

    &:before {
      @include mq(small) {
        @include arrowPosition($position);
      }
    }
  }
}

@each $kind, $color in $tooltipKind {
  .tooltip--#{$kind},
  .tooltip--#{$kind}:before {
    background-color: $color;

    @if $kind == warning {
      color: color(text, dark);
    }
  }
}

$bpIndex: 1;
$bpLength: length($breakpoints);

@each $bpKey, $bpSize in $breakpoints {
  @each $position, $props in $tooltipPositions {
    .tooltip--#{$position}-on-bp-#{$bpKey} {
      @if ($bpIndex + 1) <= $bpLength {
        $nextBpKey: nth(nth($breakpoints, ($bpIndex + 1)), 1);
        @include mqBetween($bpKey, $nextBpKey) {
          @include tooltipPosition($position);
          &:before {
            @include arrowPosition($position);
          }
        }
      } @else {
        @include mq($bpKey) {
          @include tooltipPosition($position);
          &:before {
            @include arrowPosition($position);
          }
        }
      }
    }
  }
  $bpIndex: $bpIndex + 1;
}
