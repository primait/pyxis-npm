@each $color, $tones in $colors {
  @each $colorTone, $colorHex in $tones {
    .bg-#{$color}-#{$colorTone},
    .bg#{capitalize($color)}#{capitalize($colorTone)} {
      background-color: $colorHex;
    }

    .c-#{$color}-#{$colorTone},
    .c#{capitalize($color)}#{capitalize($colorTone)} {
      color: $colorHex;
    }
  }
}

@each $fontKey, $size in $fontSizes {
  .fs-#{$fontKey},
  .fs#{capitalize($fontKey)} {
    font-size: size($fontKey);
    line-height: lineHeight($fontKey);
  }
}

@each $fontWeight, $font in $fonts {
  .fw-#{$fontWeight},
  .fw#{capitalize($fontWeight)} {
    font-family: font($fontWeight);
  }
}


@each $fontWeight, $font in $fonts {
  .fw-#{$fontWeight} {
    font-family: font($fontWeight);

    @if $fontWeight == heavy {
      letter-spacing: 1px;
      text-transform: uppercase;
    }
  }
}

@for $i from 0 through 10 {
  .opacity-#{$i} {
    opacity: $i/10;
  }
}

@each $mqKey, $size in $containerConfig {
  .hide#{capitalize($mqKey)}Down {
    @include mqDown($mqKey) {
      display: none !important;
    }
  }

  .hide#{capitalize($mqKey)}Up {
    @include mq($mqKey) {
      display: none !important;
    }
  }
}

@mixin fontSizesByBreakpoint($fontSizes:(), $breakpoints:()) {

  @each $fontKey, $size in $fontSizes {
    $bpIndex: 1;
    $bpLength: length($breakpoints);

    @each $bpKey, $bpSize in $breakpoints {

      .fs-#{$fontKey}-on-bp-#{$bpKey},
      .fs#{capitalize($fontKey)}OnBp#{capitalize($bpKey)} {

        @if ($bpIndex + 1) <= $bpLength {
          $nextBpKey: nth(nth($breakpoints, ($bpIndex + 1)), 1);
          @include mqBetween($bpKey, $nextBpKey) {
            font-size: size($fontKey);
          }
        }
        @else {
          @include mq($bpKey) {
            font-size: size($fontKey);
          }
        }

      }

      $bpIndex: $bpIndex + 1;
    }
  }

}

@include fontSizesByBreakpoint(map-remove($fontSizes, "root"), map-remove($breakpoints, "boundDiff"));
