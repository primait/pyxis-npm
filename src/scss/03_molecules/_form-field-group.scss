.m-form-field-group {
  align-items: flex-start;
  border-radius: map-get($formConfig, borderRadius);
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;
  padding: map-get($formConfig, formFieldPadding);
  position: relative;
  transition: background 0.3s;

  &:hover {
    @include mq(medium) {
      background: color(background, dark);
    }
  }

  @include mq(small) {
    padding: map-get($formConfig, formFieldPadding) / 2;
  }

  // Fluid group fields on mobile 
  .a-form-field,
  .a-form-field__field-wrapper, 
  .a-form-field__input {
    @include mqDown(xsmall) {
      display: flex;
      flex: 1 0 100%;
    } 
  }

  .a-form-field__input {
    @include mqDown(xsmall) {
      width: map-get($formConfig, fieldMaxWidth) / 3 - (map-get($formConfig, formFieldPadding) * 1.5);
    }
  }

  .a-form-field {
    $marginX: map-get($formConfig, formFieldPadding);
    $marginY: $marginX / 2;

    margin: $marginY $marginX $marginY 0;
    min-height: 0;
    padding: 0;
  }
}

.m-form-field-group__fields-list {
  display: flex;
  flex-wrap: wrap;
  width: 100%;
}

.m-form-field-group__fields-wrapper {
  display: flex;
  flex: 1;
  flex-flow: row wrap;

  @include mq(small) {
    max-width: map-get($formConfig, fieldMaxWidthLarge) + map-get($formConfig, formFieldPadding);
  }
}

.m-form-field-group__validation-messages-list {
  background-color: rgba(color(error), 0.1);
  display: flex;
  flex-direction: column;
  flex: 0 0 100%;
  font-family: font(base);
  font-size: 12px;
  max-width: map-get($formConfig, fieldMaxWidth);
}

.m-form-field-group__validation-message-list__item {
  display: flex;

  .m-form-field-group.has-field-errors &,
  .m-form-field-group.has-own-errors & {
    color: color(error);
  }

  .m-form-field-group.has-field-warnings:not(.has-own-errors):not(.has-field-errors) & {
    color: color(alert, dark);
  }
  .m-form-field-group.has-own-warnings:not(.has-own-errors):not(.has-field-errors) & {
    color: color(alert, dark);
  }
}
